# Given a string of digits, make a following permutation.
# Examples: 1,2,3 -> 1,3,2; 1,3,2,1 -> 3,1,1,2; 3,2,1 -> 1,2,3

# The strategy of making nex permutation consist of 3 steps:
# 1. Find first digit from the back that is less than the previous one.
# This means the tail will be sorted in reversed order.
# 2. Change this digit with the first one that is grater(from the back again).
# This will make sure we will not get digit that were on this place before.
# 3. Reverse the tail, so they were sorted in the right order again.

num = '15833764422'
num_list = []
for letter in num:
    num_list.append(letter)
#1.
for index in reversed(range(len(num_list))):
    if index == 0:
        change_index_1 = 0
        break
    if num_list[index-1] < num_list[index]:
        change_index_1 = index-1
        break
#2.
for index in reversed(range(len(num_list))):
    if num_list[index] > num_list[change_index_1]:
        num_list[change_index_1],num_list[index] = num_list[index],num_list[change_index_1]
        break
#3.
for step in range((len(num)-change_index_1-1)//2):
    num_list[change_index_1+1+step],num_list[len(num_list)-1-step] = num_list[len(num_list)-1-step],num_list[change_index_1+1+step]
result = ''
for digit in num_list:
    result += digit
print(result)

# Time: O(n), since we iterate only 3 times through the list.
# Space: O(n), since I used list here, but it's possible to do that in O(1), I just don't like the way string swaps elements.
